// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { ReadEpisodesEpisodesGetData, ReadEpisodesEpisodesGetResponse, ReadEpisodesEpisodesGetError, CreateEpisodeEpisodesPostData, CreateEpisodeEpisodesPostResponse, CreateEpisodeEpisodesPostError, DeleteEpisodeEpisodesEpisodeUuidDeleteData, DeleteEpisodeEpisodesEpisodeUuidDeleteResponse, DeleteEpisodeEpisodesEpisodeUuidDeleteError, ReadEpisodeEpisodesEpisodeUuidGetData, ReadEpisodeEpisodesEpisodeUuidGetResponse, ReadEpisodeEpisodesEpisodeUuidGetError, UpdateEpisodeEpisodesEpisodeUuidPatchData, UpdateEpisodeEpisodesEpisodeUuidPatchResponse, UpdateEpisodeEpisodesEpisodeUuidPatchError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Episodes
 */
export const readEpisodesEpisodesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadEpisodesEpisodesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadEpisodesEpisodesGetResponse, ReadEpisodesEpisodesGetError, ThrowOnError>({
        url: '/episodes/',
        ...options
    });
};

/**
 * Create Episode
 */
export const createEpisodeEpisodesPost = <ThrowOnError extends boolean = false>(options: Options<CreateEpisodeEpisodesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEpisodeEpisodesPostResponse, CreateEpisodeEpisodesPostError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/episodes/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete Episode
 */
export const deleteEpisodeEpisodesEpisodeUuidDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteEpisodeEpisodesEpisodeUuidDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEpisodeEpisodesEpisodeUuidDeleteResponse, DeleteEpisodeEpisodesEpisodeUuidDeleteError, ThrowOnError>({
        url: '/episodes/{episode_uuid}',
        ...options
    });
};

/**
 * Read Episode
 */
export const readEpisodeEpisodesEpisodeUuidGet = <ThrowOnError extends boolean = false>(options: Options<ReadEpisodeEpisodesEpisodeUuidGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadEpisodeEpisodesEpisodeUuidGetResponse, ReadEpisodeEpisodesEpisodeUuidGetError, ThrowOnError>({
        url: '/episodes/{episode_uuid}',
        ...options
    });
};

/**
 * Update Episode
 */
export const updateEpisodeEpisodesEpisodeUuidPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateEpisodeEpisodesEpisodeUuidPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateEpisodeEpisodesEpisodeUuidPatchResponse, UpdateEpisodeEpisodesEpisodeUuidPatchError, ThrowOnError>({
        url: '/episodes/{episode_uuid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};