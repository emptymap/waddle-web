// This file is auto-generated by @hey-api/openapi-ts

import {
	type Options as ClientOptions,
	type TDataShape,
	type Client,
	formDataBodySerializer,
} from "@hey-api/client-fetch";
import type {
	ReadEpisodesV1EpisodesGetData,
	ReadEpisodesV1EpisodesGetResponse,
	ReadEpisodesV1EpisodesGetError,
	CreateEpisodeV1EpisodesPostData,
	CreateEpisodeV1EpisodesPostResponse,
	CreateEpisodeV1EpisodesPostError,
	DeleteEpisodeV1EpisodesEpisodeIdDeleteData,
	DeleteEpisodeV1EpisodesEpisodeIdDeleteResponse,
	DeleteEpisodeV1EpisodesEpisodeIdDeleteError,
	UpdateEpisodeV1EpisodesEpisodeIdPatchData,
	UpdateEpisodeV1EpisodesEpisodeIdPatchResponse,
	UpdateEpisodeV1EpisodesEpisodeIdPatchError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Read Episodes
 * Read all episodes
 */
export const readEpisodesV1EpisodesGet = <ThrowOnError extends boolean = false>(
	options?: Options<ReadEpisodesV1EpisodesGetData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		ReadEpisodesV1EpisodesGetResponse,
		ReadEpisodesV1EpisodesGetError,
		ThrowOnError
	>({
		url: "/v1/episodes/",
		...options,
	});
};

/**
 * Create Episode
 */
export const createEpisodeV1EpisodesPost = <
	ThrowOnError extends boolean = false,
>(
	options: Options<CreateEpisodeV1EpisodesPostData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		CreateEpisodeV1EpisodesPostResponse,
		CreateEpisodeV1EpisodesPostError,
		ThrowOnError
	>({
		...formDataBodySerializer,
		url: "/v1/episodes/",
		...options,
		headers: {
			"Content-Type": null,
			...options?.headers,
		},
	});
};

/**
 * Delete Episode
 * Delete an episode
 */
export const deleteEpisodeV1EpisodesEpisodeIdDelete = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DeleteEpisodeV1EpisodesEpisodeIdDeleteData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteEpisodeV1EpisodesEpisodeIdDeleteResponse,
		DeleteEpisodeV1EpisodesEpisodeIdDeleteError,
		ThrowOnError
	>({
		url: "/v1/episodes/{episode_id}",
		...options,
	});
};

/**
 * Update Episode
 * Update an existing episode
 */
export const updateEpisodeV1EpisodesEpisodeIdPatch = <
	ThrowOnError extends boolean = false,
>(
	options: Options<UpdateEpisodeV1EpisodesEpisodeIdPatchData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).patch<
		UpdateEpisodeV1EpisodesEpisodeIdPatchResponse,
		UpdateEpisodeV1EpisodesEpisodeIdPatchError,
		ThrowOnError
	>({
		url: "/v1/episodes/{episode_id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};
